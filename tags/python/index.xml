<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Zone13.io</title>
    <link>https://zone13.io/tags/python/</link>
    <description>Recent content in Python on Zone13.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Mon, 27 Mar 2017 21:18:17 +0100</lastBuildDate>
    <atom:link href="https://zone13.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Twitter notifications for MotionEyeOS video surveillance system on Raspberry Pi</title>
      <link>https://zone13.io/post/Twitter-notifications-for-MotionEyeOS-video-surveillance-system/</link>
      <pubDate>Mon, 27 Mar 2017 21:18:17 +0100</pubDate>
      
      <guid>https://zone13.io/post/Twitter-notifications-for-MotionEyeOS-video-surveillance-system/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/ccrisan/motioneyeos&#34;&gt;MotionEyeOS&lt;/a&gt; is a wonderful project by Calin Crisan that converts your single board computer into a video surveillance system in a matter of minutes. It is &lt;a href=&#34;https://github.com/ccrisan/motioneyeos/wiki/Supported-Devices&#34;&gt;supported&lt;/a&gt; on a number of devices and is well maintained with good community support.&lt;/p&gt;

&lt;p&gt;Now that the latest &lt;a href=&#34;https://www.raspberrypi.org/products/pi-zero-w/&#34;&gt;Raspberry Pi Zero version (W)&lt;/a&gt; comes with onboard Wi-Fi, it makes an ideal candidate to deploy MotionEyeOS across your perimeter and run a cheap video surveillance system with lesser clutter of having to attach a Wi-Fi dongle as in the previous versions of Pi Zero.&lt;/p&gt;

&lt;h3 id=&#34;motion-notifications&#34;&gt;Motion notifications&lt;/h3&gt;

&lt;p&gt;MotionEyeOS offers push notifications in the form of email alerts and custom scripts upon detection of motion. The community has already chipped in with options like &lt;a href=&#34;https://www.pi-supply.com/make/adding-push-notifications-motioneyeos-formerly-motionpie/&#34;&gt;Pushover and IFTTT&lt;/a&gt;. I was playing around with the software on Raspberry Pi over the last few days and thought that Twitter notifications on mobile would be nice to have. I did some basic search to see if someone already implemented this, however couldn&amp;rsquo;t find any and decided I will code my own.&lt;/p&gt;

&lt;p&gt;Now the &lt;a href=&#34;https://github.com/ccrisan/motioneyeos/releases&#34;&gt;SD card images&lt;/a&gt; supplied by MotionEyeOS are stripped down versions of the Raspbian OS with only the necessary features for performance reasons. To enable Twitter notifications using my method below, you will have to install MotionEyeOS on top of Raspbian (&lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;lite version&lt;/a&gt; preferred). This is to ensure that the &lt;a href=&#34;https://github.com/bear/python-twitter&#34;&gt;Python Twitter&lt;/a&gt; module can be installed.&lt;/p&gt;

&lt;h3 id=&#34;installation-steps&#34;&gt;Installation steps&lt;/h3&gt;

&lt;p&gt;I assume that you have the latest version of Raspbian Jessie Lite &lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/README.md&#34;&gt;written&lt;/a&gt; to the Micro SD card. I have tested the following method on Pi Zero and Pi 3B and works fine. Use &lt;strong&gt;sudo&lt;/strong&gt; where necessary.&lt;/p&gt;

&lt;p&gt;1&amp;gt; Power ON the Pi and open a SSH session.&lt;/p&gt;

&lt;p&gt;2&amp;gt; Use &lt;strong&gt;raspi-config&lt;/strong&gt; to enable the camera module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/raspi-config1.png&#34; alt=&#34;raspi-config&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/raspi-config2.png&#34; alt=&#34;raspi-config&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/raspi-config3.png&#34; alt=&#34;raspi-config&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3&amp;gt; Open the &lt;strong&gt;/etc/modules&lt;/strong&gt; file and add &lt;strong&gt;bcm2835-v4l2&lt;/strong&gt; on a new line.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/etc_modules_cam.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4&amp;gt; Follow the steps mentioned &lt;a href=&#34;https://github.com/ccrisan/motioneye/wiki/Install-On-Raspbian&#34;&gt;here&lt;/a&gt; under &amp;lsquo;Instructions&amp;rsquo; to complete the installation of MotionEyeOS on Raspbian.&lt;/p&gt;

&lt;p&gt;5&amp;gt; Create a dummy Twitter account and setup the API keys. &lt;a href=&#34;https://www.slickremix.com/docs/how-to-get-api-keys-and-tokens-for-twitter/&#34;&gt;Here&lt;/a&gt; is a good resource on generating the Twitter API keys to use in the script.&lt;/p&gt;

&lt;p&gt;6&amp;gt; Install &lt;a href=&#34;https://github.com/bear/python-twitter&#34;&gt;Python Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install python-twitter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7&amp;gt; There are a couple of ways of receiving the push notifications on your Twitter account:&lt;/p&gt;

&lt;p&gt;​   a) Setup the dummy Twitter account to post a Tweet every time motion is detected - &lt;a href=&#34;https://gist.github.com/zone13/947e9eea96294a6e070b630378349e70&#34;&gt;script 1&lt;/a&gt;. Configure your Twitter account to follow the dummy account and receive push notifications on your mobile device using the steps &lt;a href=&#34;https://support.twitter.com/articles/20169887&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;​   b) Script variant that tweets the latest captured image along with the tweet - &lt;a href=&#34;https://gist.github.com/zone13/48a4a918331eda4be50afed6eb5f4f2c&#34;&gt;script 2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: If you are planning to use this, make sure that your tweets are &lt;a href=&#34;https://support.twitter.com/articles/20169886&#34;&gt;protected&lt;/a&gt; so that only you or those accounts that you permit can view your tweets. &lt;img src=&#34;https://zone13.io/images/protected_tweets.png&#34; alt=&#34;Protected tweets&#34; /&gt;&lt;/p&gt;

&lt;p&gt;​   c) Setup the dummy Twitter account to send Direct Messages (DM) to your Twitter account - &lt;a href=&#34;https://gist.github.com/zone13/308d5b39f9f968e21041a53cc9644d22&#34;&gt;script 3&lt;/a&gt;. Enable notifications for DMs on your mobile device.&lt;/p&gt;

&lt;p&gt;Using b) above has the added advantage of adding the latest image captured by MotionEyeOS to the Tweet. DMs do not support attaching an image though.&lt;/p&gt;

&lt;p&gt;8&amp;gt; Once you finalize the script to use, create folder at &lt;strong&gt;/var/lib/motioneye&lt;/strong&gt; and store the python script there. Ensure that the script has execute permissions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/motion_notifications.png&#34; alt=&#34;Motion notifications&#34; /&gt;&lt;/p&gt;

&lt;p&gt;9&amp;gt; Login to the web GUI for MotionEyeOS and configure to run the script under &amp;lsquo;Motion Notifications&amp;rsquo;&lt;/p&gt;

&lt;h3 id=&#34;caveats&#34;&gt;Caveats&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The Twitter API has limits on the number of tweets and direct messages. However during my tests, none of these limits were hit and I have a fully functional surveillance system at home using this method.&lt;/li&gt;
&lt;li&gt;In one of the scripts (2), I have added a method to upload the latest image capture to the motion alert tweet. This method has its own privacy implications which is the same as uploading your data to any other cloud service. Make sure that you know what you are doing. :)&lt;/li&gt;
&lt;li&gt;Do not expose your live feed to internet using port forwarding. In my case, I OpenVPN into my Raspberry instance to view the live feed.&lt;/li&gt;
&lt;li&gt;Needless to say, use strong passwords for SSH and other service that you enable with MotionEyeOS. Do not re-use the passwords. Also remember that MotionEyeOS stores the password in plaintext in config files.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hope this post is useful for those who wish to setup Twitter notifications for MotionEyeOS. If you run into problems, please post a comment below and I will try my best to help.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Social network based backdoor for pentests</title>
      <link>https://zone13.io/post/social_network_backdoor_windows/</link>
      <pubDate>Tue, 21 Feb 2017 22:37:30 +0000</pubDate>
      
      <guid>https://zone13.io/post/social_network_backdoor_windows/</guid>
      <description>

&lt;p&gt;Once you gain access to a system during pentest, you might want to retain access by means of a backdoor. The most trivial method is to use &lt;a href=&#34;https://www.offensive-security.com/metasploit-unleashed/meterpreter-backdoor/&#34;&gt;metsvc&lt;/a&gt; which &amp;lsquo;unfortunately&amp;rsquo; is very well fingerprinted by anti-virus software.&lt;/p&gt;

&lt;p&gt;In this post, let us look at how to use a backdoor that uses social network for communications. The method used by the backdoor is identical to what was mentioned in my previous &lt;a href=&#34;https://zone13.io/post/social-media-based-pentest-dropbox/&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/drop_box_design.png&#34; alt=&#34;design&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m going to assume that the pentester already has a meterpreter shell on the system that he wants to backdoor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;steps&#34;&gt;Steps&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The Python code for the backdoor is compiled into &lt;strong&gt;exe&lt;/strong&gt; using &lt;a href=&#34;http://www.pyinstaller.org/&#34;&gt;PyInstaller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The backdoor is uploaded to the system using the existing meterpreter shell and executed&lt;/li&gt;
&lt;li&gt;The backdoor code polls the pentester&amp;rsquo;s Twitter handle every 30 seconds for commands&lt;/li&gt;
&lt;li&gt;The command retrieved is executed on the system and the output is uploaded to the pentester&amp;rsquo;s Facebook page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if the target network containing the system we are backdooring keeps a check on all traffic (HTTPS), the proxy will only notice the C&amp;amp;C traffic from the system as legitimate API calls to Facebook and Twitter - hence providing the necessary levels of stealth.&lt;/p&gt;

&lt;h5 id=&#34;video-demo-youtube-link&#34;&gt;Video demo (YouTube link)&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://youtu.be/RG5uQGGPDq4&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/RG5uQGGPDq4/0.jpg&#34; alt=&#34;Demo video&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stealthy social network (Twitter / Facebook) based pentest drop box</title>
      <link>https://zone13.io/post/social-media-based-pentest-dropbox/</link>
      <pubDate>Sat, 04 Feb 2017 23:58:30 +0000</pubDate>
      
      <guid>https://zone13.io/post/social-media-based-pentest-dropbox/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;The best place to exchange a secret is amongst a crowd - unknown.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;With the amount of traffic generated by social networks, what if you could camouflage the pentest drop box traffic?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pentest drop box&lt;/strong&gt; - a portable device that is plugged (or connected wirelessly) to the target network during pentests and can be controlled from a command and control (C&amp;amp;C) server to perform the following functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Network monitoring / sniffing&lt;/li&gt;
&lt;li&gt;Scan /exploit other hosts in the network&lt;/li&gt;
&lt;li&gt;ARP / DNS poisoning for MiTM attacks&lt;/li&gt;
&lt;li&gt;Denial of service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Drop boxes can call C&amp;amp;C using a number of methods, not limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reverse SSH (over OpenVPN)&lt;/li&gt;
&lt;li&gt;SSH over HTTP(s)&lt;/li&gt;
&lt;li&gt;DNS tunneling - &lt;a href=&#34;https://www.stevencampbell.info/2017/02/configure-pentest-dropbox-dns-tunneling/&#34;&gt;here&lt;/a&gt; is a good write-up&lt;/li&gt;
&lt;li&gt;Route through TOR&lt;/li&gt;
&lt;li&gt;ICMP based shell&lt;/li&gt;
&lt;li&gt;Egress buster - try all outbound ports until you find an open port&lt;/li&gt;
&lt;li&gt;Use a 3G dongle so that the C&amp;amp;C commands don&amp;rsquo;t touch the target network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the above methods will require a persistent connection (shell) with your C&amp;amp;C, increasing the chances of detection. Often your connection may get interrupted, so you may also need a re-connect mechanism.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;So, how can you create an near perfect C&amp;amp;C mechanism?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It should blend with the rest of the network traffic and be asynchronous. Of course, encryption is a must.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Say hello to social media based drop boxes.. !!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wrote a &lt;a href=&#34;https://zone13.io/post/abusing-social-network-APIs-for-Fun-and-Profit1/&#34;&gt;blog post&lt;/a&gt; earlier on using Facebook API for data exfiltration during Red team pentests. A similar method was used to create a C&amp;amp;C for the drop box here.&lt;/p&gt;

&lt;p&gt;The advantage here is that it can be quite hard to distinguish the drop box C&amp;amp;C traffic from the legitimate social network traffic. The social network API calls offer HTTPS encryption, which is a huge advantage.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;design&#34;&gt;Design&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Upstream&lt;/strong&gt; - for receiving commands from C&amp;amp;C&lt;/p&gt;

&lt;p&gt;Twitter - has a tweet limit of 140 characters, perfect for issuing commands to the drop box. The API calls uses HTTPS by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Downstream&lt;/strong&gt; - for receiving the results of commands, data exfiltration&lt;/p&gt;

&lt;p&gt;Facebook - has a post limit of 63,206 characters - which in most cases can be sufficient to receive command outputs like nmap scan results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stealth&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To prevents mining of C&amp;amp;C tweets and posts made to Facebook, it is advisable to limit the privacy options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/twitter_privacy.png&#34; alt=&#34;Twitter privacy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/unpublish_page.png&#34; alt=&#34;Facebook privacy&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;hardware&#34;&gt;Hardware&lt;/h5&gt;

&lt;p&gt;The pentester&amp;rsquo;s life has become a lot easier during physical pentests, thanks to the single board computers and the support they get. This gives a lot of freedom in terms of customizing the drop box in terms of software that needs to be on the box. Essentially, you can now build a drop box from scratch with only the tools you need. The low price tags are also an added advantage.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a big fan of Raspberry Pi (RPi), so my drop box builds have been based on them till now. &lt;a href=&#34;http://www.blackhillsinfosec.com/&#34;&gt;Black Hills Information Security&lt;/a&gt; had published a &lt;a href=&#34;http://www.blackhillsinfosec.com/?p=5156&#34;&gt;blog post&lt;/a&gt; on building your own drop box along with the a detailed comparison of single board computers. They have been doing some really cool research stuff and this is no exception. If you are planning to build a box on your own, I would highly recommend reading their blog post to start with.&lt;/p&gt;

&lt;h5 id=&#34;software&#34;&gt;Software&lt;/h5&gt;

&lt;p&gt;There is a Kali build for RPi available and it is possible to use their metapackages to customize for your engagement - web, Wi-Fi etc. If you want to keep it really light weight, you can also start with the Raspbian Lite and then customize for your needs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/drop_box_design.png&#34; alt=&#34;design&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;demos&#34;&gt;Demos&lt;/h4&gt;

&lt;p&gt;For the sake of the demo, I will be running the scripts manually. During deployments, I simply start the script at boot and let it query for commands every minute or so.&lt;/p&gt;

&lt;p&gt;During the demo, I will be showing how the commands are passed as tweets which are retrieved and executed by the drop box. The results of the command are then posted to Facebook page.&lt;/p&gt;

&lt;p&gt;Demo video (YouTube link):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0VwMmq4XusE&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/0VwMmq4XusE/0.jpg&#34; alt=&#34;Demo video&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Mitigations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It will be hard to come up with a solution to completely mitigate this from a Blue team perspective. DNS and deep packet inspection would be the way to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow-up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Any suggestions / thoughts and mitigations are welcome.&lt;/p&gt;

&lt;p&gt;Hope you find some use for this during pentests.&lt;/p&gt;

&lt;p&gt;Cheers !!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Abusing social network APIs for Fun &amp; Profit - Facebook API</title>
      <link>https://zone13.io/post/abusing-social-network-APIs-for-Fun-and-Profit1/</link>
      <pubDate>Tue, 31 Jan 2017 23:58:30 +0000</pubDate>
      
      <guid>https://zone13.io/post/abusing-social-network-APIs-for-Fun-and-Profit1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Question - In a controlled corporate environment with DLP solutions monitoring the HTTP and Email traffic, how would you perform data exfiltration during a Red Team Pentest ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;lsquo;One&amp;rsquo; of the answers would be to use social networking sites, let&amp;rsquo;s look at Facebook in this post.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/fb_post.png&#34; alt=&#34;fb_post&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Data exfiltration using Facebook (FB) and the like is nothing new. There has been various instances where these networks have been used as C&amp;amp;C, data receivers etc..&lt;/p&gt;

&lt;p&gt;Why are social networking sites a good option - one major reason is that they are loosely controlled (not blocked in many organizations - is LinkedIn blocked at your workplace?)&lt;/p&gt;

&lt;p&gt;FB allows &lt;a href=&#34;http://mashable.com/2012/01/04/facebook-character-limit/#s7MHOr9Q6Gqo&#34;&gt;63,206 characters&lt;/a&gt; in a single post, which is quite cool. So can we use that as a receiver, i.e, post data to a FB post from a corporate environment and then retrieve it from outside??&lt;/p&gt;

&lt;p&gt;Ok, as some of you are already thinking - that would mean giving up the data to Facebook. Solution - Use Encryption  - encrypt the data using AES or similar and then post to FB. (Maybe?)&lt;/p&gt;

&lt;p&gt;Well, 63,206 is not a big number. What if I want to send out a bigger file? - Split the file into chunks, say 50,000 characters into each post. Finally combine all of them.&lt;/p&gt;

&lt;p&gt;Surely you don&amp;rsquo;t want to login to your personal Facebook to paste data to your wall (!). Let&amp;rsquo;s use Facebook APIs.&lt;/p&gt;

&lt;p&gt;Now, I would assume that it is not always ASCII data that we would want to send out. E.g. Zip archives, image files or anything for that reason. So what do you do?&lt;/p&gt;

&lt;p&gt;The approach I took is as below:&lt;/p&gt;

&lt;p&gt;Read the file in binary mode &amp;ndash;&amp;gt; Do a base-64 encoding of the binary data which gives the ascii version &amp;ndash;&amp;gt; split them up as necessary and post to FB using API from inside the corporate network &amp;ndash;&amp;gt; Retrieve the data from the (multiple) FB posts from outside and combine them &amp;ndash;&amp;gt; do the base-64 decoding &amp;ndash;&amp;gt; write the output in binary mode to file &amp;ndash;&amp;gt; BINGO !!&lt;/p&gt;

&lt;p&gt;Now, one thing you can also do is to Unpublish the Page / control the viewing to which you are making the post. That way, it will ensure that only the Page owner can view the posted data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/unpublish_page.png&#34; alt=&#34;unpublished_page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Red Team scenario&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I would like to present the usage through a Red team exercise scenario where the task is to perform exfiltration of a sample file (of the order a few KBs magnitude). There is nothing to prevent the same method from being used to send out a large file; for the sake of the PoC, I will keep it simple. :)&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Explanation&lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;During a Red team exercise, you get access to a machine from where the data (file) needs to be pulled. Imagine that the DLP solutions would detect you from sending out data via webmail, file upload solutions and the only open ports for outside access are 80 and 443. Definitely you don&amp;rsquo;t want to risk detection on port 80.&lt;/li&gt;
&lt;li&gt;That leaves us with port 443. Say for instance there is a whitelist policy in place that only allows access to specific websites and incidentally Facebook is one of them (!). [As a side note, the same method can be allowed to send out data by abusing APIs provided by other social media sites as well. Time to block LinkedIn API from corporate network? :) ]&lt;/li&gt;
&lt;li&gt;The method can be used as follows:

&lt;ol&gt;
&lt;li&gt;Suppose the data to be sent out is in the form of a zip file (&lt;strong&gt;secret.zip&lt;/strong&gt;) on the target system that we have access to.&lt;/li&gt;
&lt;li&gt;Read the zip file (I&amp;rsquo;m using Python for the PoC) in binary mode.&lt;/li&gt;
&lt;li&gt;Do a base-64 encode of the binary data&lt;/li&gt;
&lt;li&gt;Post the base-64 encode of the data to FB&lt;/li&gt;
&lt;li&gt;Retrieve the encoded data from outside the corporate network, again FB API can be used.&lt;/li&gt;
&lt;li&gt;Decode the base-64 encoded data to binary and write to file (zip)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The base for the Python scripts have been adopted from &lt;a href=&#34;http://nodotcom.org/python-facebook-tutorial.html&#34;&gt;link 1&lt;/a&gt; and &lt;a href=&#34;https://github.com/minimaxir/facebook-page-post-scraper/blob/master/get_fb_posts_fb_page.py&#34;&gt;link 2&lt;/a&gt;. All credits to the original work for making this simple.&lt;/p&gt;

&lt;p&gt;Python script for data exfiltration - &lt;a href=&#34;https://github.com/zone13/python_facebook/blob/master/put.py&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python script for retrieving the FB post and writing to file - &lt;a href=&#34;https://github.com/zone13/python_facebook/blob/master/get.py&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This also goes to demonstrate how Facebook APIs can be exploited for malicious purposes, e.g. a malware with API tokens that can post to a Facebook page / wall maintained by the bad guy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python code to retrieve the latest tweet from a user</title>
      <link>https://zone13.io/post/python-code-latest-tweet/</link>
      <pubDate>Sat, 17 Sep 2016 15:25:24 +0100</pubDate>
      
      <guid>https://zone13.io/post/python-code-latest-tweet/</guid>
      <description>&lt;p&gt;This is a Python code snippet to retrieve the latest tweet from a user by making use of the Twitter developer API.&lt;/p&gt;

&lt;p&gt;The Twitter API details can be obtained from the &lt;a href=&#34;https://apps.twitter.com/&#34;&gt;developer portal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Github &lt;a href=&#34;https://github.com/zone13/python_dev/blob/master/twitter_latest_tweet.py&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

#Python script to retrive the latest tweet from a user
#Created by zone13.io (https://www.zone13.io)
#Version 1.0
#Usage - ./script.py &amp;lt;twitter_handle&amp;gt;
#e.g. ./script.py rihanna
#Adapted from https://github.com/bear/python-twitter
#Requirement - pip install python-twitter

import sys,twitter
api = twitter.Api()

#Populate your twitter API details below
consumer_key = &#39;&#39;
consumer_secret = &#39;&#39;
access_token_key = &#39;&#39;
access_token_secret = &#39;&#39;

api = twitter.Api(
    consumer_key=consumer_key,
    consumer_secret=consumer_secret,
    access_token_key=access_token_key,
    access_token_secret=access_token_secret
)

def user_tweet(thandle):
	statuses = api.GetUserTimeline(screen_name=thandle)
	return statuses[0].text
	
if __name__ == &amp;quot;__main__&amp;quot;:
	latest_tweet = user_tweet(sys.argv[1])
	print latest_tweet
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>