<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Zone13.io</title>
    <link>https://zone13.io/tags/python/</link>
    <description>Recent content in Python on Zone13.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved - 2016</copyright>
    <lastBuildDate>Sat, 04 Feb 2017 23:58:30 +0000</lastBuildDate>
    <atom:link href="https://zone13.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Stealthy social network (Twitter / Facebook) based pentest drop box</title>
      <link>https://zone13.io/post/social-media-based-pentest-dropbox/</link>
      <pubDate>Sat, 04 Feb 2017 23:58:30 +0000</pubDate>
      
      <guid>https://zone13.io/post/social-media-based-pentest-dropbox/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Pentest drop box&lt;/strong&gt; - a portable device that is plugged (or connected wirelessly) to the target network during pentests and can be controlled from a command and control (C&amp;amp;C) server to perform the following functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Network monitoring / sniffing&lt;/li&gt;
&lt;li&gt;Scan /exploit other hosts in the network&lt;/li&gt;
&lt;li&gt;ARP / DNS poisoning for MiTM attacks&lt;/li&gt;
&lt;li&gt;Denial of service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Drop boxes can call C&amp;amp;C using a number of methods, not limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reverse SSH (over OpenVPN)&lt;/li&gt;
&lt;li&gt;SSH over HTTP(s)&lt;/li&gt;
&lt;li&gt;DNS tunneling - &lt;a href=&#34;https://www.stevencampbell.info/2017/02/configure-pentest-dropbox-dns-tunneling/&#34;&gt;here&lt;/a&gt; is a good write-up&lt;/li&gt;
&lt;li&gt;Route through TOR&lt;/li&gt;
&lt;li&gt;ICMP based shell&lt;/li&gt;
&lt;li&gt;Egress buster - try all outbound ports until you find an open port&lt;/li&gt;
&lt;li&gt;Use a 3G dongle so that the C&amp;amp;C commands don&amp;rsquo;t touch the target network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the above methods will require a persistent connection (shell) with your C&amp;amp;C, increasing the chances of detection. Often your connection may get interrupted, so you may also need a re-connect mechanism.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;So, how can you create an near perfect C&amp;amp;C mechanism?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It should blend with the rest of the network traffic and be asynchronous. Of course, encryption is a must.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Say hello to social media based drop boxes.. !!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wrote a &lt;a href=&#34;https://zone13.io/post/abusing-social-network-APIs-for-Fun-and-Profit1/&#34;&gt;blog post&lt;/a&gt; earlier on using Facebook API for data exfiltration during Red team pentests. A similar method was used to create a C&amp;amp;C for the drop box here.&lt;/p&gt;

&lt;p&gt;The advantage here is that it can be quite hard to distinguish the drop box C&amp;amp;C traffic from the legitimate social network traffic. The social network API calls offer HTTPS encryption, which is a huge advantage.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;design&#34;&gt;Design&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Upstream&lt;/strong&gt; - for receiving commands from C&amp;amp;C&lt;/p&gt;

&lt;p&gt;Twitter - has a tweet limit of 140 characters, perfect for issuing commands to the drop box. The API calls uses HTTPS by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Downstream&lt;/strong&gt; - for receiving the results of commands, data exfiltration&lt;/p&gt;

&lt;p&gt;Facebook - has a post limit of 63,206 characters - which in most cases can be sufficient to receive command outputs like nmap scan results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stealth&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To prevents mining of C&amp;amp;C tweets and posts made to Facebook, it is advisable to limit the privacy options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/twitter_privacy.png&#34; alt=&#34;Twitter privacy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/unpublish_page.png&#34; alt=&#34;Facebook privacy&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;hardware&#34;&gt;Hardware&lt;/h5&gt;

&lt;p&gt;The pentester&amp;rsquo;s life has become a lot easier during physical pentests, thanks to the single board computers and the support they get. This gives a lot of freedom in terms of customizing the drop box in terms of software that needs to be on the box. Essentially, you can now build a drop box from scratch with only the tools you need. The low price tags are also an added advantage.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a big fan of Raspberry Pi (RPi), so my drop box builds have ben based on them till now. &lt;a href=&#34;http://www.blackhillsinfosec.com/&#34;&gt;Black Hills Information Security&lt;/a&gt; had published a &lt;a href=&#34;http://www.blackhillsinfosec.com/?p=5156&#34;&gt;blog post&lt;/a&gt; on building your own drop box along with the a detailed comparison of single board computers. They have been doing some really cool research stuff and this is no exception. If you are planning to build a box on your own, I would highly recommend reading their blog post to start with.&lt;/p&gt;

&lt;h5 id=&#34;software&#34;&gt;Software&lt;/h5&gt;

&lt;p&gt;There is a Kali build for RPi available and it is possible to use their metapackages to customize for your engagement - web, Wi-Fi etc. If you want to keep it really light weight, you can also start with the Raspbian Lite and then customize for your needs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/drop_box_design.png&#34; alt=&#34;design&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;demos&#34;&gt;Demos&lt;/h4&gt;

&lt;p&gt;For the sake of the demo, I will be running the scripts manually. During deployments, I simply start the script at boot and let it query for commands every minute or so.&lt;/p&gt;

&lt;p&gt;During the demo, I will be showing how the commands are passed as tweets which are retrieved and executed by the drop box. The results of the command are then posted to Facebook page.&lt;/p&gt;

&lt;p&gt;Demo video (YouTube link):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0VwMmq4XusE&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/0VwMmq4XusE/0.jpg&#34; alt=&#34;Demo video&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Mitigations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It will be hard to come up with a solution to completely mitigate this from a Blue team perspective. DNS and deep packet inspection would be the way to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow-up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Any suggestions / thoughts and mitigations are welcome.&lt;/p&gt;

&lt;p&gt;Hope you find some use for this during pentests.&lt;/p&gt;

&lt;p&gt;Cheers !!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Abusing social network APIs for Fun &amp; Profit - Facebook API</title>
      <link>https://zone13.io/post/abusing-social-network-APIs-for-Fun-and-Profit1/</link>
      <pubDate>Tue, 31 Jan 2017 23:58:30 +0000</pubDate>
      
      <guid>https://zone13.io/post/abusing-social-network-APIs-for-Fun-and-Profit1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Question - In a controlled corporate environment with DLP solutions monitoring the HTTP and Email traffic, how would you perform data exfiltration during a Red Team Pentest ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;lsquo;One&amp;rsquo; of the answers would be to use social networking sites, let&amp;rsquo;s look at Facebook in this post.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/fb_post.png&#34; alt=&#34;fb_post&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Data exfiltration using Facebook (FB) and the like is nothing new. There has been various instances where these networks have been used as C&amp;amp;C, data receivers etc..&lt;/p&gt;

&lt;p&gt;Why are social networking sites a good option - one major reason is that they are loosely controlled (not blocked in many organizations - is LinkedIn blocked at your workplace?)&lt;/p&gt;

&lt;p&gt;FB allows &lt;a href=&#34;http://mashable.com/2012/01/04/facebook-character-limit/#s7MHOr9Q6Gqo&#34;&gt;63,206 characters&lt;/a&gt; in a single post, which is quite cool. So can we use that as a receiver, i.e, post data to a FB post from a corporate environment and then retrieve it from outside??&lt;/p&gt;

&lt;p&gt;Ok, as some of you are already thinking - that would mean giving up the data to Facebook. Solution - Use Encryption  - encrypt the data using AES or similar and then post to FB. (Maybe?)&lt;/p&gt;

&lt;p&gt;Well, 63,206 is not a big number. What if I want to send out a bigger file? - Split the file into chunks, say 50,000 characters into each post. Finally combine all of them.&lt;/p&gt;

&lt;p&gt;Surely you don&amp;rsquo;t want to login to your personal Facebook to paste data to your wall (!). Let&amp;rsquo;s use Facebook APIs.&lt;/p&gt;

&lt;p&gt;Now, I would assume that it is not always ASCII data that we would want to send out. E.g. Zip archives, image files or anything for that reason. So what do you do?&lt;/p&gt;

&lt;p&gt;The approach I took is as below:&lt;/p&gt;

&lt;p&gt;Read the file in binary mode &amp;ndash;&amp;gt; Do a base-64 encoding of the binary data which gives the ascii version &amp;ndash;&amp;gt; split them up as necessary and post to FB using API from inside the corporate network &amp;ndash;&amp;gt; Retrieve the data from the (multiple) FB posts from outside and combine them &amp;ndash;&amp;gt; do the base-64 decoding &amp;ndash;&amp;gt; write the output in binary mode to file &amp;ndash;&amp;gt; BINGO !!&lt;/p&gt;

&lt;p&gt;Now, one thing you can also do is to Unpublish the Page / control the viewing to which you are making the post. That way, it will ensure that only the Page owner can view the posted data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/unpublish_page.png&#34; alt=&#34;unpublished_page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Red Team scenario&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I would like to present the usage through a Red team exercise scenario where the task is to perform exfiltration of a sample file (of the order a few KBs magnitude). There is nothing to prevent the same method from being used to send out a large file; for the sake of the PoC, I will keep it simple. :)&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Explanation&lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;During a Red team exercise, you get access to a machine from where the data (file) needs to be pulled. Imagine that the DLP solutions would detect you from sending out data via webmail, file upload solutions and the only open ports for outside access are 80 and 443. Definitely you don&amp;rsquo;t want to risk detection on port 80.&lt;/li&gt;
&lt;li&gt;That leaves us with port 443. Say for instance there is a whitelist policy in place that only allows access to specific websites and incidentally Facebook is one of them (!). [As a side note, the same method can be allowed to send out data by abusing APIs provided by other social media sites as well. Time to block LinkedIn API from corporate network? :) ]&lt;/li&gt;
&lt;li&gt;The method can be used as follows:

&lt;ol&gt;
&lt;li&gt;Suppose the data to be sent out is in the form of a zip file (&lt;strong&gt;secret.zip&lt;/strong&gt;) on the target system that we have access to.&lt;/li&gt;
&lt;li&gt;Read the zip file (I&amp;rsquo;m using Python for the PoC) in binary mode.&lt;/li&gt;
&lt;li&gt;Do a base-64 encode of the binary data&lt;/li&gt;
&lt;li&gt;Post the base-64 encode of the data to FB&lt;/li&gt;
&lt;li&gt;Retrieve the encoded data from outside the corporate network, again FB API can be used.&lt;/li&gt;
&lt;li&gt;Decode the base-64 encoded data to binary and write to file (zip)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The base for the Python scripts have been adopted from &lt;a href=&#34;http://nodotcom.org/python-facebook-tutorial.html&#34;&gt;link 1&lt;/a&gt; and &lt;a href=&#34;https://github.com/minimaxir/facebook-page-post-scraper/blob/master/get_fb_posts_fb_page.py&#34;&gt;link 2&lt;/a&gt;. All credits to the original work for making this simple.&lt;/p&gt;

&lt;p&gt;Python script for data exfiltration - &lt;a href=&#34;https://github.com/zone13/python_facebook/blob/master/put.py&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python script for retrieving the FB post and writing to file - &lt;a href=&#34;https://github.com/zone13/python_facebook/blob/master/get.py&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This also goes to demonstrate how Facebook APIs can be exploited for malicious purposes, e.g. a malware with API tokens that can post to a Facebook page / wall maintained by the bad guy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python code to retrieve the latest tweet from a user</title>
      <link>https://zone13.io/post/python-code-latest-tweet/</link>
      <pubDate>Sat, 17 Sep 2016 15:25:24 +0100</pubDate>
      
      <guid>https://zone13.io/post/python-code-latest-tweet/</guid>
      <description>&lt;p&gt;This is a Python code snippet to retrieve the latest tweet from a user by making use of the Twitter developer API.&lt;/p&gt;

&lt;p&gt;The Twitter API details can be obtained from the &lt;a href=&#34;https://apps.twitter.com/&#34;&gt;developer portal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Github &lt;a href=&#34;https://github.com/zone13/python_dev/blob/master/twitter_latest_tweet.py&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

#Python script to retrive the latest tweet from a user
#Created by zone13.io (https://www.zone13.io)
#Version 1.0
#Usage - ./script.py &amp;lt;twitter_handle&amp;gt;
#e.g. ./script.py rihanna
#Adapted from https://github.com/bear/python-twitter
#Requirement - pip install python-twitter

import sys,twitter
api = twitter.Api()

#Populate your twitter API details below
consumer_key = &#39;&#39;
consumer_secret = &#39;&#39;
access_token_key = &#39;&#39;
access_token_secret = &#39;&#39;

api = twitter.Api(
    consumer_key=consumer_key,
    consumer_secret=consumer_secret,
    access_token_key=access_token_key,
    access_token_secret=access_token_secret
)

def user_tweet(thandle):
	statuses = api.GetUserTimeline(screen_name=thandle)
	return statuses[0].text
	
if __name__ == &amp;quot;__main__&amp;quot;:
	latest_tweet = user_tweet(sys.argv[1])
	print latest_tweet
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>