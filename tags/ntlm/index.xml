<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ntlm on zone13.io</title>
    <link>https://zone13.io/tags/ntlm/</link>
    <description>Recent content in Ntlm on zone13.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Sep 2016 19:55:06 +0100</lastBuildDate>
    <atom:link href="https://zone13.io/tags/ntlm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cracking NTLMv2 responses captured using responder</title>
      <link>https://zone13.io/post/cracking-ntlmv2-responses-captured-using-responder/</link>
      <pubDate>Fri, 23 Sep 2016 19:55:06 +0100</pubDate>
      
      <guid>https://zone13.io/post/cracking-ntlmv2-responses-captured-using-responder/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: The contents of the post are meant for educational purposes only.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the previous &lt;a href=&#34;https://zone13.io/post/Raspberry-Pi-Zero-for-credential-snagging/&#34;&gt;post&lt;/a&gt;, a Raspberry Pi Zero was modified to capture hashes (or rather NTLMv2 responses from the client).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how &lt;a href=&#34;https://hashcat.net/hashcat/&#34;&gt;hashcat&lt;/a&gt; can be used to crack these responses to obtain the user password. I will be using dictionary based cracking for this exercise on a Windows system.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Download the latest version of hashcat binaries from &lt;a href=&#34;https://hashcat.net/hashcat/&#34;&gt;here&lt;/a&gt; - v3.10 at the time of writing.&lt;/p&gt;

&lt;p&gt;Unzip the 7z file and open a command prompt at the unzipped location.&lt;/p&gt;

&lt;p&gt;For convenience, I have created two directories in the hashcat folder:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hashes&lt;/strong&gt; - to store the responses that need to be cracked&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cracked&lt;/strong&gt; - to store the cracked passwords&lt;/p&gt;

&lt;h3 id=&#34;captured-responses&#34;&gt;Captured responses&lt;/h3&gt;

&lt;p&gt;The client response captured by Responder was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[HTTP] NTLMv2 Client   : 192.168.154.131
[HTTP] NTLMv2 Username : MANGO\neo
[HTTP] NTLMv2 Hash     : neo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where,&lt;/p&gt;

&lt;p&gt;MANGO is my domain name and neo is the user who was logged into the system.&lt;/p&gt;

&lt;p&gt;I saved the response into a text file named &lt;strong&gt;hash.txt&lt;/strong&gt; in the &lt;strong&gt;hashes&lt;/strong&gt; folder created earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/hash.png&#34; alt=&#34;hash&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;cracking-using-hashcat&#34;&gt;Cracking using hashcat&lt;/h3&gt;

&lt;p&gt;The hashcat developers have done a wonderful job in simplifying the cracking process. All you need is a fast  cracking machine and patience. :)&lt;/p&gt;

&lt;p&gt;Since this is a dictionary based cracking, there are two scenarios here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your password list does not contain the user password&lt;/li&gt;
&lt;li&gt;Your password list has the user password&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I wanted to show both scenarios here, starting with the worst case - not having the password in the list.&lt;/p&gt;

&lt;p&gt;For the sake of the the demo, I extracted a subset of the passwords from example.dict that comes with hashcat and saved it as &lt;strong&gt;password_list.txt&lt;/strong&gt; in the hashcat folder. For the first run, the &lt;strong&gt;password_list.txt&lt;/strong&gt; does not have the user password.&lt;/p&gt;

&lt;p&gt;Open a command prompt at the extracted hashcat folder. For NTLMv2 cracking, the hashcat can be run as,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hashcat64.exe -m 5600 hashes\hash.txt password_list.txt -o cracked\cracked.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don&amp;rsquo;t specify -o switch, the password (if cracked) will be stored in &lt;strong&gt;hashcat.pot&lt;/strong&gt; file in the hashcat folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the password is not found, this is what you see once hashcat completes the cracking.&lt;/p&gt;

&lt;p&gt;Status: &lt;strong&gt;Exhausted&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/password_not_found.png&#34; alt=&#34;password_not_found&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For the next run, the case if I have the user password in my password list. I edited the password_list.txt and appended the user password (I created the user, remember :)).&lt;/p&gt;

&lt;p&gt;Running the hashcat tool again,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hashcat64.exe -m 5600 hashes\hash.txt password_list.txt -o cracked\cracked.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Status: &lt;strong&gt;Cracked&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/password_found.png&#34; alt=&#34;password_found&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To view the cracked password, see the &lt;strong&gt;cracked.txt&lt;/strong&gt; file in the folder named &lt;strong&gt;cracked&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zone13.io/images/cracked_out.png&#34; alt=&#34;cracked_out&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The success of cracking the password using this method solely depends on whether or not your password list is good enough.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>